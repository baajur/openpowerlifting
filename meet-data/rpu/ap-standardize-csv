#!/usr/bin/env python3
# Given a results.csv as outputted by wrpf-parse, parse each sheet one at a time
# and join all the sheets together into an OpenPowerlifting-formatted CSV file.

import sys
import os
import re

try:
    import oplcsv
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(os.path.dirname(
        os.path.dirname(os.path.realpath(__file__)))), "scripts"))
    import oplcsv


def die(s):
    print(s, file=sys.stderr)
    sys.exit(1)


# Given the array of lines, split it up into an array per-sheet.
def split_by_sheet(lines):
    sheetlist = []
    sheet = None

    for line in lines:
        # If this line starts a new sheet, generate a new array.
        if line[0] == 'Sheet':
            sheet = []
            sheetlist.append(sheet)
        sheet.append(line)

    return sheetlist


# Given a list of lines all of which belong to the same sheet, parse that
# into an OpenPowerlifting-style CSV.
def parse_sheet(sheet):
    assert sheet[0][0] == 'Sheet'

    csv = oplcsv.Csv()
    title = sheet[0][1].lower()


    division_prefix = ''

    if 'biceps' in title:
        return csv
    elif 'powersport' in title:
        return csv

    if 'army' in title:
        division_prefix = 'Army'
    elif 'military' in title:
        division_prefix = 'Military'
    elif 'disabled' in title:
        division_prefix = 'Disabled'

    event = ''
    if 'type-p' in sheet[0][2]:
        if 'pp' in title:
            event = 'BD'
        else:
            event = 'SBD'
    elif  'type-sq' in sheet[0][2]:
        event = 'S'
    elif  'type-b' in sheet[0][2]:
        event = 'B'
    elif  'type-dl' in sheet[0][2]:
        event = 'D'
    else:
        print('Help')


    if event =='SBD':
        if len(sheet[1]) == 23:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Squat1Kg','Squat2Kg','Squat3Kg','Squat4Kg','Bench1Kg','Bench2Kg','Bench3Kg','Bench4Kg','Deadlift1Kg','Deadlift2Kg','Deadlift3Kg','Deadlift4Kg','TotalKg','IGNORE','IGNORE']
        elif len(sheet[1]) == 21:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Squat1Kg','Squat2Kg','Squat3Kg','Squat4Kg','Bench1Kg','Bench2Kg','Bench3Kg','Bench4Kg','Deadlift1Kg','Deadlift2Kg','Deadlift3Kg','Deadlift4Kg','TotalKg']
        elif len(sheet[1]) == 20:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Squat1Kg','Squat2Kg','Squat3Kg','Bench1Kg','Bench2Kg','Bench3Kg','Deadlift1Kg','Deadlift2Kg','Deadlift3Kg','TotalKg','IGNORE','IGNORE']
 
    elif event == 'S':
        if len(sheet[1]) == 23:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Squat1Kg','Squat2Kg','Squat3Kg','Squat4Kg','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','TotalKg','IGNORE','IGNORE']
        elif len(sheet[1]) == 21:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Squat1Kg','Squat2Kg','Squat3Kg','Squat4Kg','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','TotalKg']
        elif len(sheet[1]) ==15:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Squat1Kg','Squat2Kg','Squat3Kg','Squat4Kg','TotalKg','IGNORE','IGNORE']
        elif len(sheet[1]) ==14:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Squat1Kg','Squat2Kg','Squat3Kg','TotalKg','IGNORE','IGNORE']
        elif len(sheet[1]) == 20:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Squat1Kg','Squat2Kg','Squat3Kg','TotalKg','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE']

    elif event == 'B':
        if len(sheet[1]) == 23:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Bench1Kg','Bench2Kg','Bench3Kg','Bench4Kg','TotalKg','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE']
        elif len(sheet[1]) == 21:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Bench1Kg','Bench2Kg','Bench3Kg','Bench4Kg','TotalKg','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE']
        elif len(sheet[1]) ==15:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Bench1Kg','Bench2Kg','Bench3Kg','Bench4Kg','TotalKg','IGNORE','IGNORE']            
        elif len(sheet[1]) ==14:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Bench1Kg','Bench2Kg','Bench3Kg','TotalKg','IGNORE','IGNORE']            
        elif len(sheet[1]) == 20:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Bench1Kg','Bench2Kg','Bench3Kg','TotalKg','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE']
 
    elif event == 'D':
        if len(sheet[1]) == 23:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Deadlift1Kg','Deadlift2Kg','Deadlift3Kg','Deadlift4Kg','TotalKg','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE']
        elif len(sheet[1]) == 21:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Deadlift1Kg','Deadlift2Kg','Deadlift3Kg','Deadlift4Kg','TotalKg','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE']
        elif len(sheet[1]) == 15:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Deadlift1Kg','Deadlift2Kg','Deadlift3Kg','Deadlift4Kg','TotalKg','IGNORE','IGNORE']
        elif len(sheet[1]) == 14:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Deadlift1Kg','Deadlift2Kg','Deadlift3Kg','TotalKg','IGNORE','IGNORE']
        elif len(sheet[1]) == 20:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Deadlift1Kg','Deadlift2Kg','Deadlift3Kg','TotalKg','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE','IGNORE']
        
    elif event == 'BD':
        if len(sheet[1]) == 23:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Squat1Kg','Squat2Kg','Squat3Kg','Squat4Kg','Bench1Kg','Bench2Kg','Bench3Kg','Bench4Kg','Deadlift1Kg','Deadlift2Kg','Deadlift3Kg','Deadlift4Kg','TotalKg','IGNORE','IGNORE']
        elif len(sheet[1]) == 20:
            csv.fieldnames = ['Place','CyrillicName','Sex','BirthDate','IGNORE','Division','WeightClassKg','BodyweightKg','Squat1Kg','Squat2Kg','Squat3Kg','Bench1Kg','Bench2Kg','Bench3Kg','Deadlift1Kg','Deadlift2Kg','Deadlift3Kg','TotalKg','IGNORE','IGNORE']

    csv.fieldnames.append('Tested')

    if 'DT' in title:
        tested = 'Yes'
    else:
        tested = 'No'

    csv.fieldnames.append('Event')



    csv.fieldnames.append('Equipment')

    equipment = ''
    if 'division-u' in sheet[0][2]:
        if event == 'SBD':   #Either Raw or Wraps
            if 'wraps' in title:
                equipment = 'Wraps'
            else:
                equipment = 'Raw'
        else:
            equipment = 'Raw'
    else: #Either single or multi
        if any(x in title.split() for x in ['sp','s.ply','s. ply']):
            equipment = 'Single-ply'
        else:
            equipment = 'Multi-ply' 



    # Iterate over each line, skipping the two header lines.
    for line in sheet[1:]:

        line.append(tested)
        line.append(event)
        line.append(equipment)
        if division_prefix != '':
            line[csv.index('Division')] = division_prefix + " " + line[csv.index('Division')]

        csv.rows.append(line)

    # Remove all the columns named 'IGNORE' before returning the CSV for
    # integration.
    while 'IGNORE' in csv.fieldnames:
        csv.remove_column_by_name('IGNORE')

    return csv



def cleanup_place(csv):
    place_idx = csv.index('Place')
    total_idx = csv.index('TotalKg')

    for row in csv.rows:
        if '.00' in row[place_idx]:  # Convert place to an integer if it wasn't already
            row[place_idx] = str(int(float(row[place_idx])))

        # Somewhat convoluted way of checking if a lifter is marked DQ and has
        # a nonzero total
        if (row[place_idx] == 'DQ' and
                row[total_idx].replace('.', '').replace('-', '').isdigit() and
                float(row[total_idx]) != 0.0):
            row[place_idx] = 'DD'
            row[total_idx] = ''
        elif (row[place_idx] == '' and
                row[total_idx].replace('.', '').replace('-', '').isdigit() and
                float(row[total_idx]) != 0.0):
            row[place_idx] = 'DD'
            row[total_idx] = ''
        # Everything else is a regular DQ
        elif not row[place_idx] or row[place_idx] == '-':
            row[place_idx] = 'DQ'
        elif (row[total_idx].replace('.', '').replace('-', '').isdigit() and
                float(row[total_idx]) == 0.0):
            row[place_idx] = 'DQ'
            row[total_idx] = ''
        elif row[total_idx] == '':
            row[place_idx] = 'DQ'


def unreverse_names(csv):

    if 'CyrillicName' in csv.fieldnames:
        nameidx = csv.index('CyrillicName')
    elif 'Name' in csv.fieldnames:
        nameidx = csv.index('Name')
    for row in csv.rows:
        parts = row[nameidx].split()
        parts = [name.title() for name in parts]

        # The last name is probably the given first name.
        fixed = [parts[-1]] + parts[:-1]
        name = ' '.join(fixed)

        row[nameidx] = name

# Names sometimes have something in brackets after them - extra divisions
# maybe?


def cleanup_names(csv):
    if 'CyrillicName' in csv.fieldnames:
        nameidx = csv.index('CyrillicName')
    elif 'Name' in csv.fieldnames:
        nameidx = csv.index('Name')

    for row in csv.rows:
        row[nameidx] = re.sub(r'\(.*\)', '', row[nameidx])
        row[nameidx] = row[nameidx].strip()




def assign_best(csv, liftname):
    idx1 = csv.index('%s1Kg' % liftname)
    idx2 = csv.index('%s2Kg' % liftname)
    idx3 = csv.index('%s3Kg' % liftname)
    bestidx = csv.index('Best3%sKg' % liftname)

    def weight(str):
        try:
            return float(str)
        except ValueError:
            return 0.0

    for row in csv.rows:
        best = max(weight(row[idx1]), weight(row[idx2]), weight(row[idx3]))

        if float(best) > 0:
            row[bestidx] = str(best)

def unreverse_names(csv):
    nameidx = csv.index('CyrillicName')
    for row in csv.rows:
        parts = row[nameidx].split()
        parts = [name.title() for name in parts]

        # The last name is probably the given first name.
        fixed = [parts[-1]] + parts[:-1]
        name = ' '.join(fixed)


        row[nameidx] = name

def capitalise_sex(csv):
    sexidx = csv.index('Sex')
    for row in csv.rows:
        row[sexidx] = row[sexidx].upper()

def fix_birthdate(csv):
    bdidx = csv.index('BirthDate')
    for row in csv.rows:
        [day,month,year] = row[bdidx].split('.')
        row[bdidx] = '-'.join([year,month,day])  

def fix_place(csv):
    placeidx = csv.index('Place')
    for row in csv.rows:
        if row[placeidx] == '-':
            row[placeidx] = 'DQ'

def fix_division(csv):
    dividx = csv.index('Division')
    for row in csv.rows:
        div_parts = row[dividx].lower().split()
        standard_div = ''
        for div in div_parts:
            if div == 'o':
                standard_div = standard_div + " " +'Open'
            elif div == 't':
                standard_div = standard_div + " " +'Teen'
            elif div == 't1':
                standard_div = standard_div + " " +'Teen 13-15'
            elif div == 't2':
                standard_div = standard_div + " " +'Teen 16-17'
            elif div == 't3':
                standard_div = standard_div + " " +'Teen 18-19'
            elif div == 'j':
                standard_div = standard_div + " " +'Juniors 20-23'
            elif div == 'm1':
                standard_div = standard_div + " " +'Masters 40-44'
            elif div == 'm2':
                standard_div = standard_div + " " +'Masters 45-49'
            elif div == 'm3':
                standard_div = standard_div + " " +'Masters 50-54'
            elif div == 'm4':
                standard_div = standard_div + " " +'Masters 55-59'
            elif div == 'm5':
                standard_div = standard_div + " " +'Masters 60-64'
            elif div == 'm6':
                standard_div = standard_div + " " +'Masters 65-69'
            elif div == 'm7':
                standard_div = standard_div + " " +'Masters 70-74'
            elif div == 'm8':
                standard_div = standard_div + " " +'Masters 75-79'
            elif div == 'm9':
                standard_div = standard_div + " " +'Masters 80-84'
            elif div == 'army':
                standard_div = standard_div + " " +'Army'
            elif div == 'military':
                standard_div = standard_div + " " +'Military'
            elif div == 'disabled':
                standard_div = standard_div + " " +'Disabled'
        row[dividx] =  standard_div.strip()

def cleanup_lift(csv, fieldname):
    if fieldname in csv.fieldnames:
        idx = csv.index(fieldname)

        for row in csv.rows:
            amount = row[idx]

            amount = ''.join(c for c in amount if c.isdigit()
                             or c in ['.', '-'])
            amount = amount.replace('.00', '').replace('.0', '')

            if (amount == 'X' or amount.replace('-', '') == '0' or
                    not any(c.isdigit() for c in amount)):
                amount = ''

            # Sometimes numbers have more than 2 commas, if so remove the
            # second one
            if len([ii for ii, a in enumerate(amount) if a == '.']) > 1:
                amount = amount[:amount.rfind(
                    '.')] + amount[amount.rfind('.') + 1:]

            row[idx] = amount

def fix_totals(csv):
    def weight(str):
        try:
            return float(str)
        except ValueError:
            return 0.0

    totalidx = csv.index('TotalKg')
    if 'Best3SquatKg' in csv.fieldnames:
        sqidx = csv.index('Best3SquatKg')
    else:
        sqidx = -1
    if 'Best3BenchKg' in csv.fieldnames:
        bpidx = csv.index('Best3BenchKg')
    else:
        bpidx = -1
    if 'Best3DeadliftKg' in csv.fieldnames:
        dlidx = csv.index('Best3DeadliftKg')
    else:
        dlidx = -1

    placeidx = csv.index('Place')

    for row in csv.rows:
        if row[placeidx].isdigit():
            total  = 0
            if sqidx  != -1:
                total += weight(row[sqidx])
            if bpidx  != -1:
                total += weight(row[bpidx])
            if dlidx  != -1:
                total += weight(row[dlidx])

            row[totalidx] = str(total)

def main(filename):
    # Since the input is comma-separated, store the file as a list of lists.
    with open(filename) as fd:
        lines = [x.strip().split(',') for x in fd.readlines()]

    # Split the input filename into sheets, each of which is an independent
    # CSV.
    sheetlist = split_by_sheet(lines)

    # Parse each sheet independently, then join them all together into a
    # single CSV.
    csv = oplcsv.Csv()
    for sheet in sheetlist:
        sheetcsv = parse_sheet(sheet)
        csv.cat(sheetcsv)


    for x in ['Squat1Kg', 'Squat2Kg', 'Squat3Kg', 'Squat4Kg',
              'Bench1Kg', 'Bench2Kg', 'Bench3Kg', 'Bench4Kg',
              'Deadlift1Kg', 'Deadlift2Kg', 'Deadlift3Kg', 'Deadlift4Kg', 'TotalKg']:
        cleanup_lift(csv, x)

    
    if 'Squat3Kg' in csv.fieldnames:
        csv.insert_column(csv.index('Squat3Kg') + 1, 'Best3SquatKg')
    if 'Bench3Kg' in csv.fieldnames:
        csv.insert_column(csv.index('Bench3Kg') + 1, 'Best3BenchKg')
    if 'Deadlift3Kg' in csv.fieldnames:
        csv.insert_column(csv.index('Deadlift3Kg') + 1, 'Best3DeadliftKg')


    if 'Squat1Kg' in csv.fieldnames:
        assign_best(csv, 'Squat')
    if 'Bench1Kg' in csv.fieldnames:
        assign_best(csv, 'Bench')
    if 'Deadlift1Kg' in csv.fieldnames:
        assign_best(csv, 'Deadlift')


    # Now it's time to standardize the CSV a little bit!
    # We have some temporary columns hanging out.
    unreverse_names(csv)

    capitalise_sex(csv)

    fix_birthdate(csv)

    fix_place(csv)

    fix_division(csv)

    fix_totals(csv)

    csv.write(sys.stdout)
    return 0


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print(" Usage: %s results.csv > entries.csv" % sys.argv[0])
        sys.exit(1)
    sys.exit(main(sys.argv[1]))
